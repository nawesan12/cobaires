---
import Layout from "../layouts/Layout.astro";
import Footer from "../components/sections/Footer.astro";
import Header from "../components/sections/Nosotros/Header.astro";

export function getStaticPaths() {
    return [
        { params: { proyecto: "1" } },
        { params: { proyecto: "2" } },
        { params: { proyecto: "3" } },
    ];
}

const { proyecto } = Astro.params;
---

<Layout>
    <Header />

    <section
        class="px-4 lg:px-0 lg:max-w-7xl w-full mx-auto flex flex-col gap-11 py-12"
    >
        <!-- Carousel Section -->
        <div id="carousel-container" class="relative overflow-hidden">
            <!-- Main Image Display -->
            <!-- Added cursor styles for desktop interaction feedback -->
            <img
                id="carousel-image"
                src="/carrusel1.png"
                class="h-[600px] w-full rounded-2xl object-cover select-none cursor-grab active:cursor-grabbing"
                alt="Imagen principal del proyecto"
            />
            <!-- Dots Navigation -->
            <div
                id="carousel-dots"
                class="flex justify-center items-center gap-3 mt-6"
            >
                <!-- Dots are generated by the script below -->
            </div>
        </div>

        <div
            class="px-4 lg:px-0 lg:max-w-4xl mx-auto flex flex-col w-full gap-11"
        >
            <h2 class="font-medium text-3xl text-[#051314]">
                Vivienda unifamiliar en Grand Bell
            </h2>

            <p class="text-gray-700 leading-relaxed">
                Esta vivienda responde a una premisa muy clara y definitoria
                establecida por el cliente, la localización del estar-comedor
                debía estar en la plata superior. Eso le permitiría gozar de las
                vistas circundantes, apreciar las copas de los árboles, y
                conseguir una mayor extensión del horizonte.
                <br />
                <br />
                Se dio prioridad a un emplazamiento de carácter volumétrico que estableció
                vínculos de equilibrio y claridad con el entorno, dividiendo la casa
                en dos cuerpos. La casa se define por la superposición de dos tipos
                de vida: una introvertida, en la que prevalecen el aislamiento y
                las actividades privadas y otra extrovertida y contemplativa del
                paisaje, las que se articular mediante un vacío que contiene el hall
                y la escalera.
                <br />
                <br />
                En cuanto a la materialidad, solo brillan los colores propios de
                los materiales: hormigón visto, piedra pórfido y revoque plástico
                blanco.
            </p>

            <!-- The grid layout for this list has been updated -->
            <ul class="flex flex-col gap-4 mb-20">
                <li
                    class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3"
                >
                    <span class="text-lg font-semibold text-[#051314]"
                        >Proyecto</span
                    >
                    <p class="text-lg font-light text-[#051314]">
                        Vivienda en Grand Bell
                    </p>
                </li>
                <li
                    class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3"
                >
                    <span class="text-lg font-semibold text-[#051314]"
                        >Tipo</span
                    >
                    <p class="text-lg font-light text-[#051314]">
                        Proyección y dirección
                    </p>
                </li>
                <li
                    class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3"
                >
                    <span class="text-lg font-semibold text-[#051314]"
                        >Locación</span
                    >
                    <p class="text-lg font-light text-[#051314]">
                        Club de campo Grand Bell, City Bell, La Plata, Buenos
                        Aires, Argentina
                    </p>
                </li>
                <li
                    class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3"
                >
                    <span class="text-lg font-semibold text-[#051314]">Año</span
                    >
                    <p class="text-lg font-light text-[#051314]">2011-2012</p>
                </li>
                <li
                    class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3"
                >
                    <span class="text-lg font-semibold text-[#051314]"
                        >Superficie</span
                    >
                    <p class="text-lg font-light text-[#051314]">266 m2</p>
                </li>
                <li
                    class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3"
                >
                    <span class="text-lg font-semibold text-[#051314]"
                        >Cliente</span
                    >
                    <p class="text-lg font-light text-[#051314]">Privado</p>
                </li>
            </ul>
        </div>
    </section>
</Layout>

<script>
    // --- Carousel Logic ---
    document.addEventListener("DOMContentLoaded", () => {
        const images = ["/carrusel1.png", "/carrusel2.png", "/carrusel3.png"];

        const carouselContainer = document.getElementById(
            "carousel-container",
        ) as HTMLDivElement;
        const carouselImage = document.getElementById(
            "carousel-image",
        ) as HTMLImageElement;
        const dotsContainer = document.getElementById("carousel-dots");

        if (!carouselContainer || !carouselImage || !dotsContainer) return;

        let currentIndex = 0;
        let isDragging = false;
        let startPos = 0;
        let currentTranslate = 0;
        let prevTranslate = 0;

        // Function to update the carousel's active slide and dot
        const updateCarousel = () => {
            // Update the main image source
            carouselImage.src = images[currentIndex];
            carouselImage.alt = `Imagen del carrusel ${currentIndex + 1}`;

            // Update the active state of the dots
            const dots = dotsContainer.children;
            for (let i = 0; i < dots.length; i++) {
                const dot = dots[i] as HTMLButtonElement;
                dot.classList.remove("bg-[#051314]", "w-8");
                dot.classList.add("bg-gray-300", "w-3");
                dot.setAttribute("aria-current", "false");
            }
            const activeDot = dots[currentIndex] as HTMLButtonElement;
            activeDot.classList.add("bg-[#051314]", "w-8");
            activeDot.classList.remove("bg-gray-300", "w-3");
            activeDot.setAttribute("aria-current", "true");
        };

        // Create navigation dots dynamically
        images.forEach((_, index) => {
            const dot = document.createElement("button");
            dot.classList.add(
                "h-3",
                "rounded-full",
                "transition-all",
                "duration-300",
                "ease-in-out",
            );
            dot.setAttribute("aria-label", `Ir a la imagen ${index + 1}`);
            dot.addEventListener("click", () => {
                currentIndex = index;
                updateCarousel();
            });
            dotsContainer.appendChild(dot);
        });

        // --- Gesture Handling ---
        const dragStart = (index: number, event: MouseEvent | TouchEvent) => {
            isDragging = true;
            startPos =
                "touches" in event ? event.touches[0].clientX : event.clientX;
            // Prevents default drag behavior (e.g., ghost image)
            event.preventDefault();
        };

        const dragging = (event: MouseEvent | TouchEvent) => {
            if (!isDragging) return;
            const currentPosition =
                "touches" in event ? event.touches[0].clientX : event.clientX;
            currentTranslate = currentPosition - startPos;
        };

        const dragEnd = () => {
            if (!isDragging) return;
            isDragging = false;
            const movedBy = currentTranslate;

            // Swipe threshold: if moved more than 50px, change slide
            if (movedBy < -50 && currentIndex < images.length - 1) {
                currentIndex += 1;
            }
            if (movedBy > 50 && currentIndex > 0) {
                currentIndex -= 1;
            }

            updateCarousel();
            currentTranslate = 0; // Reset translation
        };

        // Add event listeners for both mouse and touch
        carouselContainer.addEventListener("mousedown", (e) =>
            dragStart(currentIndex, e),
        );
        carouselContainer.addEventListener("touchstart", (e) =>
            dragStart(currentIndex, e),
        );

        carouselContainer.addEventListener("mouseup", dragEnd);
        carouselContainer.addEventListener("touchend", dragEnd);

        carouselContainer.addEventListener("mouseleave", dragEnd);

        carouselContainer.addEventListener("mousemove", dragging);
        carouselContainer.addEventListener("touchmove", dragging);

        // Initialize the carousel to the first image
        updateCarousel();
    });
</script>
