---
// src/pages/proyectos/[id].astro
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import SecondHeader from "../components/SecondHeader.astro";
import { PrismaClient } from "@prisma/client";

export const prerender = false;

const prisma = new PrismaClient();

const { id } = Astro.params;
const project = await prisma.project.findUnique({
    where: { id: Number(id) },
    include: {
        images: {
            orderBy: {
                id: "asc",
            },
        },
    },
});

// FIX: If no project is found, Astro will show a 404 page.
// This prevents errors like "Cannot read properties of null" later on.
if (!project) {
    return new Response(null, {
        status: 404,
        statusText: 'Not Found'
    });
}

// Safely map image URLs
const imageUrls = project.images.map((img) => img.url);
---

<Layout>
    <div class="block lg:hidden">
        <Header />
    </div>

    <div class="hidden lg:block">
        <SecondHeader />
    </div>

    <section
        class="px-4 md:px-4 lg:px-0 lg:max-w-7xl w-full mx-auto flex flex-col gap-11 py-12"
    >
        <!-- Carousel Section -->
        <div id="carousel-container" class="relative overflow-hidden">
            <img
                id="carousel-image"
                src={imageUrls[0] || "/placeholder.png"}
                class="h-[600px] w-full rounded-2xl object-cover select-none cursor-grab active:cursor-grabbing"
                alt={`Imagen principal del proyecto: ${project.title}`}
            />
            <!-- Dots Navigation -->
            <div
                id="carousel-dots"
                class="flex justify-center items-center gap-3 mt-6"
            >
                <!-- Dots are generated by the script -->
            </div>
        </div>

        <div
            class="px-4 lg:px-0 lg:max-w-4xl mx-auto flex flex-col w-full gap-11"
        >
            <h2 class="font-medium text-3xl text-[#051314]">
                {project.title}
            </h2>

            <p class="text-gray-700 leading-relaxed whitespace-pre-line">
                {project.description}
            </p>

            <ul class="flex flex-col gap-4 mb-20">
                <li
                    class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3"
                >
                    <span class="text-lg font-semibold text-[#051314]"
                        >Proyecto</span
                    >
                    <p class="text-lg font-light text-[#051314]">
                        {project.title}
                    </p>
                </li>
                {
                    project.type && (
                        <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                            <span class="text-lg font-semibold text-[#051314]">
                                Tipo
                            </span>
                            <p class="text-lg font-light text-[#051314]">
                                {project.type}
                            </p>
                        </li>
                    )
                }
                {
                    project.location && (
                        <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                            <span class="text-lg font-semibold text-[#051314]">
                                Locación
                            </span>
                            <p class="text-lg font-light text-[#051314]">
                                {project.location}
                            </p>
                        </li>
                    )
                }
                {
                    project.year && (
                        <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                            <span class="text-lg font-semibold text-[#051314]">
                                Año
                            </span>
                            <p class="text-lg font-light text-[#051314]">
                                {project.year}
                            </p>
                        </li>
                    ) /* FIX: Changed closing '}' to ')' */
                }
                {
                    project.surface && (
                        <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                            <span class="text-lg font-semibold text-[#051314]">
                                Superficie
                            </span>
                            <p class="text-lg font-light text-[#051314]">
                                {project.surface}
                            </p>
                        </li>
                    ) /* FIX: Changed closing '}' to ')' */
                }
                {
                    project.client && (
                        <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                            <span class="text-lg font-semibold text-[#051314]">
                                Cliente
                            </span>
                            <p class="text-lg font-light text-[#051314]">
                                {project.client}
                            </p>
                        </li>
                    ) /* FIX: Changed closing '}' to ')' */
                }
            </ul>
        </div>
    </section>
</Layout>

<script define:vars={{ imageUrls }}>
    document.addEventListener("DOMContentLoaded", () => {
        const images = imageUrls;

        if (!images || images.length === 0) {
            console.warn("No images found for carousel.");
            return;
        }

        const carouselContainer = document.getElementById("carousel-container");
        const carouselImage = document.getElementById("carousel-image");
        const dotsContainer = document.getElementById("carousel-dots");

        if (!carouselContainer || !carouselImage || !dotsContainer) return;

        let currentIndex = 0;
        let isDragging = false;
        let startPos = 0;
        let currentTranslate = 0;

        // Variables for auto-play logic
        let autoPlayTimer = null;
        const AUTO_PLAY_INTERVAL = 2000; // 2 seconds

        // Advances to the next slide
        const nextSlide = () => {
            currentIndex = (currentIndex + 1) % images.length;
            updateCarousel();
        };

        // Restarts the auto-play timer
        const resetAutoPlay = () => {
            if (images.length <= 1) return;

            clearInterval(autoPlayTimer);
            autoPlayTimer = setInterval(nextSlide, AUTO_PLAY_INTERVAL);
        };

        const updateCarousel = () => {
            carouselImage.src = images[currentIndex];
            carouselImage.alt = `Imagen del carrusel ${currentIndex + 1}`;

            const dots = dotsContainer.children;
            for (let i = 0; i < dots.length; i++) {
                const dot = dots[i];
                const isActive = i === currentIndex;
                dot.classList.toggle("bg-[#666695]", isActive);
                dot.classList.toggle("w-8", isActive);
                dot.classList.toggle("bg-gray-300", !isActive);
                dot.classList.toggle("w-3", !isActive);
            }
        };

        // Create navigation dots
        images.forEach((_, index) => {
            const dot = document.createElement("button");
            dot.classList.add("h-3", "rounded-full", "transition-all", "duration-300", "ease-in-out");
            dot.setAttribute("aria-label", `Ir a la imagen ${index + 1}`);
            dot.addEventListener("click", () => {
                currentIndex = index;
                updateCarousel();
                resetAutoPlay();
            });
            dotsContainer.appendChild(dot);
        });

        // Event handlers for dragging/swiping
        const dragStart = (event) => {
            if (images.length <= 1) return;
            isDragging = true;
            startPos = "touches" in event ? event.touches[0].clientX : event.clientX;
            // Pause the timer on interaction
            clearInterval(autoPlayTimer);
            event.preventDefault();
        };

        const dragging = (event) => {
            if (!isDragging) return;
            const currentPosition = "touches" in event ? event.touches[0].clientX : event.clientX;
            currentTranslate = currentPosition - startPos;
        };

        const dragEnd = () => {
            if (!isDragging) return;
            isDragging = false;
            const movedBy = currentTranslate;

            if (movedBy < -50 && currentIndex < images.length - 1) {
                currentIndex++;
            }
            if (movedBy > 50 && currentIndex > 0) {
                currentIndex--;
            }

            updateCarousel();
            resetAutoPlay(); // A swipe resets the timer
            currentTranslate = 0;
        };

        // Add event listeners
        carouselContainer.addEventListener("mousedown", dragStart);
        carouselContainer.addEventListener("touchstart", dragStart, { passive: true });
        carouselContainer.addEventListener("mouseup", dragEnd);
        carouselContainer.addEventListener("touchend", dragEnd);
        carouselContainer.addEventListener("mouseleave", dragEnd);
        carouselContainer.addEventListener("mousemove", dragging);
        carouselContainer.addEventListener("touchmove", dragging, { passive: true });

        // Initial setup
        updateCarousel();
        resetAutoPlay();
    });
</script>
