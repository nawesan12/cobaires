---
// src/pages/proyectos/[id].astro
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import SecondHeader from "../components/SecondHeader.astro";
import { PrismaClient } from "@prisma/client";

export const prerender = false;

const prisma = new PrismaClient();

const { id } = Astro.params;
const project = await prisma.project.findUnique({
    where: { id: Number(id) },
    include: {
        images: {
            orderBy: {
                id: "asc",
            },
        },
    },
});

if (!project) {
    return new Response(null, {
        status: 404,
        statusText: 'Not Found'
    });
}

const imageUrls = project.images.map((img) => img.url);
---

<Layout>
    <div class="block lg:hidden">
        <Header />
    </div>

    <div class="hidden lg:block">
        <SecondHeader />
    </div>

    <section
        class="px-4 md:px-4 lg:px-0 lg:max-w-7xl w-full mx-auto flex flex-col gap-11 py-12"
    >
        <div id="carousel-container" class="relative overflow-hidden select-none cursor-grab active:cursor-grabbing">
            <div id="carousel-page-container" class="flex gap-4">
                {/* JS will insert images here */}
            </div>
        </div>

        <div
            id="carousel-dots"
            class="flex justify-center items-center gap-3 mt-6"
        >
            {/* Dots are generated by the script */}
        </div>

        <div
            class="px-4 lg:px-0 lg:max-w-4xl mx-auto flex flex-col w-full gap-11"
        >
            <h2 class="font-medium text-3xl text-[#051314]">
                {project.title}
            </h2>

            <p class="text-gray-700 leading-relaxed whitespace-pre-line">
                {project.description}
            </p>

            <ul class="flex flex-col gap-4 mb-20">
                <li
                    class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3"
                >
                    <span class="text-lg font-semibold text-[#051314]"
                        >Proyecto</span
                    >
                    <p class="text-lg font-light text-[#051314]">
                        {project.title}
                    </p>
                </li>
                {project.type && (
                    <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                        <span class="text-lg font-semibold text-[#051314]">
                            Tipo
                        </span>
                        <p class="text-lg font-light text-[#051314]">
                            {project.type}
                        </p>
                    </li>
                )}
                {project.location && (
                    <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                        <span class="text-lg font-semibold text-[#051314]">
                            Locación
                        </span>
                        <p class="text-lg font-light text-[#051314]">
                            {project.location}
                        </p>
                    </li>
                )}
                {project.year && (
                    <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                        <span class="text-lg font-semibold text-[#051314]">
                            Año
                        </span>
                        <p class="text-lg font-light text-[#051314]">
                            {project.year}
                        </p>
                    </li>
                )}
                {project.surface && (
                    <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                        <span class="text-lg font-semibold text-[#051314]">
                            Superficie
                        </span>
                        <p class="text-lg font-light text-[#051314]">
                            {project.surface} m²
                        </p>
                    </li>
                )}
                {project.client && (
                    <li class="border-b border-black grid grid-cols-[180px_1fr] gap-x-6 py-3">
                        <span class="text-lg font-semibold text-[#051314]">
                            Cliente
                        </span>
                        <p class="text-lg font-light text-[#051314]">
                            {project.client}
                        </p>
                    </li>
                )}
            </ul>
        </div>
    </section>

    <div id="image-modal" class="hidden fixed inset-0 bg-black bg-opacity-80 z-50 flex justify-center items-center p-4 transition-opacity duration-300">
        <img id="modal-image" src="" alt="Vista detallada de la imagen" class="max-w-[90vw] max-h-[90vh] object-contain rounded-lg">
        <button id="modal-close-btn" class="absolute top-5 right-8 text-white text-5xl font-light hover:text-gray-300">&times;</button>
    </div>
</Layout>

<script define:vars={{ imageUrls }}>
    document.addEventListener("DOMContentLoaded", () => {
        const allImages = imageUrls;

        if (!allImages || allImages.length === 0) {
            document.getElementById("carousel-container")?.remove();
            document.getElementById("carousel-dots")?.remove();
            return;
        }

        // --- DOM Elements ---
        const carouselContainer = document.getElementById("carousel-container");
        const pageContainer = document.getElementById("carousel-page-container");
        const dotsContainer = document.getElementById("carousel-dots");
        const modal = document.getElementById("image-modal");
        const modalImage = document.getElementById("modal-image");
        const closeModalBtn = document.getElementById("modal-close-btn");

        if (!carouselContainer || !pageContainer || !dotsContainer || !modal || !modalImage || !closeModalBtn) return;

        // --- State (defined outside setup function to persist) ---
        let imagePages = [];
        let totalPages = 0;
        let currentPageIndex = 0;
        let isDragging = false;
        let startPos = 0;
        let currentTranslate = 0;
        let autoPlayTimer = null;
        const AUTO_PLAY_INTERVAL = 5000;

        // --- Modal Functions (don't change on resize) ---
        const openModal = (imageUrl) => {
            modalImage.src = imageUrl;
            modal.classList.remove("hidden");
            document.body.style.overflow = 'hidden';
            clearInterval(autoPlayTimer);
        };

        const closeModal = () => {
            modal.classList.add("hidden");
            document.body.style.overflow = '';
            resetAutoPlay();
        };

        // --- Carousel Functions ---
        const nextSlide = () => {
            currentPageIndex = (currentPageIndex + 1) % totalPages;
            updateCarousel();
        };

        const resetAutoPlay = () => {
            if (totalPages <= 1) return;
            clearInterval(autoPlayTimer);
            autoPlayTimer = setInterval(nextSlide, AUTO_PLAY_INTERVAL);
        };

        const updateCarousel = () => {
            pageContainer.innerHTML = '';
            const currentPageImages = imagePages[currentPageIndex] || [];

            currentPageImages.forEach(imageUrl => {
                const imgElement = document.createElement('img');
                imgElement.src = imageUrl;
                imgElement.alt = `Imagen del proyecto: ${document.title}`;
                // The `shrink-0` class prevents flex items from shrinking.
                imgElement.className = "h-[450px] w-full md:w-1/3 shrink-0 object-cover rounded-xl cursor-pointer hover:opacity-90 transition-opacity duration-200";

                imgElement.addEventListener('click', (e) => {
                    e.stopPropagation();
                    openModal(imageUrl);
                });

                pageContainer.appendChild(imgElement);
            });

            // Update dot indicators
            const dots = dotsContainer.children;
            for (let i = 0; i < dots.length; i++) {
                const dot = dots[i];
                const isActive = i === currentPageIndex;
                dot.classList.toggle("bg-[#666695]", isActive);
                dot.classList.toggle("w-8", isActive);
                dot.classList.toggle("bg-gray-300", !isActive);
                dot.classList.toggle("w-3", !isActive);
            }
        };

        // --- Responsive Setup Function ---
        function setupCarousel() {
            clearInterval(autoPlayTimer);

            // On mobile, show 1 image. On desktop (md breakpoint: 768px), show 3.
            const isDesktop = window.matchMedia("(min-width: 768px)").matches;
            const imagesPerPage = isDesktop ? 3 : 1;

            const chunk = (arr, size) => Array.from({ length: Math.ceil(arr.length / size) }, (_, i) => arr.slice(i * size, i * size + size));

            // Update state based on screen size
            imagePages = chunk(allImages, imagesPerPage);
            totalPages = imagePages.length;
            currentPageIndex = Math.min(currentPageIndex, totalPages - 1) || 0;

            // Rebuild dots
            dotsContainer.innerHTML = '';
            if (totalPages > 1) {
                imagePages.forEach((_, index) => {
                    const dot = document.createElement("button");
                    dot.classList.add("h-3", "rounded-full", "transition-all", "duration-300", "ease-in-out");
                    dot.addEventListener("click", () => {
                        currentPageIndex = index;
                        updateCarousel();
                        resetAutoPlay();
                    });
                    dotsContainer.appendChild(dot);
                });
            }

            updateCarousel();
            resetAutoPlay();
        }

        // --- Event Listeners (setup once) ---
        closeModalBtn.addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => {
            if (e.target === modal) closeModal();
        });

        const dragStart = (event) => {
            if (totalPages <= 1) return;
            isDragging = true;
            startPos = event.type.includes('touch') ? event.touches[0].clientX : event.clientX;
            clearInterval(autoPlayTimer);
            if (event.type === 'mousedown') event.preventDefault();
        };

        const dragging = (event) => {
            if (!isDragging) return;
            const currentPosition = event.type.includes('touch') ? event.touches[0].clientX : event.clientX;
            currentTranslate = currentPosition - startPos;
        };

        const dragEnd = () => {
            if (!isDragging || totalPages <= 1) return;
            isDragging = false;
            const threshold = 50;

            if (currentTranslate < -threshold) {
                currentPageIndex = (currentPageIndex + 1) % totalPages;
            } else if (currentTranslate > threshold) {
                currentPageIndex = (currentPageIndex - 1 + totalPages) % totalPages;
            }

            if (Math.abs(currentTranslate) > threshold) {
                 updateCarousel();
            }

            resetAutoPlay();
            currentTranslate = 0;
        };

        carouselContainer.addEventListener("mousedown", dragStart);
        carouselContainer.addEventListener("touchstart", dragStart, { passive: true });
        carouselContainer.addEventListener("mouseup", dragEnd);
        carouselContainer.addEventListener("touchend", dragEnd);
        carouselContainer.addEventListener("mouseleave", dragEnd);
        carouselContainer.addEventListener("mousemove", dragging);
        carouselContainer.addEventListener("touchmove", dragging, { passive: true });

        // Re-run setup on window resize (with debounce to avoid performance issues)
        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(setupCarousel, 250);
        });

        // --- Initial Call ---
        setupCarousel();
    });
</script>
