---
// src/pages/dashboard/proyectos/editar/[id].astro
import Layout from "../../../../layouts/Layout.astro";
import { PrismaClient } from "@prisma/client";

export const prerender = false;

const prisma = new PrismaClient();
const { id } = Astro.params;

// Fetch the project with its images, ordered for consistency
const project = await prisma.project.findUnique({
  where: { id: Number(id) },
  include: {
    images: {
      orderBy: { id: "asc" },
    },
  },
});

// If no project is found, return a 404 error
if (!project) {
  return new Response("Proyecto no encontrado", { status: 404 });
}

// Pass the full image objects to the template
const existingImages = project.images;
---

<Layout title={`Editando: ${project.title}`}>
  <main class="min-h-screen p-4 sm:p-6 lg:p-8">
    <div class="max-w-4xl mx-auto">
      <div class="mb-10">
        <a
          href="/dashboard/proyectos"
          class="text-blue-600 hover:underline mb-2 inline-block"
          >&larr; Volver a Proyectos</a
        >
        <h1 class="text-4xl font-bold text-gray-800">Editando Proyecto</h1>
        <p class="text-lg text-gray-500">{project.title}</p>
      </div>

      <div class="bg-white p-8 rounded-2xl shadow-lg">
        <form id="edit-project-form" class="space-y-6">
          <!-- Title -->
          <div>
            <label
              for="title"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Título del Proyecto</label
            >
            <input
              type="text"
              name="title"
              id="title"
              required
              value={project.title}
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
            />
          </div>

          <!-- Description -->
          <div>
            <label
              for="description"
              class="block text-sm font-medium text-gray-700 mb-1"
              >Descripción</label
            >
            <textarea
              name="description"
              id="description"
              rows="6"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition resize-none"
            >{project.description}</textarea>
          </div>

          <!-- Grid for details -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label
                for="type"
                class="block text-sm font-medium text-gray-700 mb-1">Tipo</label
              >
              <input
                type="text"
                name="type"
                id="type"
                value={project.type || ""}
                placeholder="Ej: Proyección y dirección"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
              />
            </div>
            <div>
              <label
                for="year"
                class="block text-sm font-medium text-gray-700 mb-1">Año</label
              >
              <input
                type="text"
                name="year"
                id="year"
                value={project.year || ""}
                placeholder="Ej: 2023-2024"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
              />
            </div>
            <div>
              <label
                for="location"
                class="block text-sm font-medium text-gray-700 mb-1"
                >Ubicación</label
              >
              <input
                type="text"
                name="location"
                id="location"
                value={project.location || ""}
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
              />
            </div>
            <div>
              <label
                for="surface"
                class="block text-sm font-medium text-gray-700 mb-1"
                >Superficie</label
              >
              <input
                type="text"
                name="surface"
                id="surface"
                value={project.surface || ""}
                placeholder="Ej: 266 m2"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
              />
            </div>
            <div>
              <label
                for="client"
                class="block text-sm font-medium text-gray-700 mb-1"
                >Cliente</label
              >
              <input
                type="text"
                name="client"
                id="client"
                value={project.client || ""}
                placeholder="Ej: Privado"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
              />
            </div>
          </div>

          <!-- Image Management -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Imágenes del Proyecto</label
            >
            <!-- Existing Images -->
            <div
              id="existing-images-container"
              class="mt-2 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4"
            >
              {
                existingImages.map((image) => (
                  <div class="relative group h-32" data-image-wrapper-id={image.id}>
                    <img
                      src={image.url}
                      alt="Vista previa de la imagen"
                      class="w-full h-full object-cover rounded-md"
                    />
                    <button
                      type="button"
                      data-image-id={image.id}
                      class="delete-image-btn absolute top-1 right-1 bg-red-600 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                      title="Eliminar imagen"
                    >
                      <svg
                        class="h-4 w-4"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="2"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          d="M6 18L18 6M6 6l12 12"
                        />
                      </svg>
                    </button>
                    <div class="absolute bottom-0 left-0 right-0 h-8 bg-black/50 flex items-center justify-center rounded-b-md opacity-80 group-hover:opacity-100 transition-opacity">
                      <input
                        type="radio"
                        name="thumbnail"
                        title="Seleccionar como portada"
                        value={image.id}
                        checked={image.isThumbnail}
                        class="h-5 w-5 cursor-pointer accent-blue-500"
                      />
                    </div>
                  </div>
                ))
              }
            </div>
            <input
              type="hidden"
              name="imagesToDelete"
              id="images-to-delete"
            />

            <!-- New Image Upload -->
            <div class="mt-4">
                <label for="image-upload" class="cursor-pointer text-sm font-medium text-blue-600 hover:text-blue-700">
                    + Añadir más imágenes...
                    <input id="image-upload" name="newImages" type="file" class="sr-only" multiple accept="image/png, image/jpeg, image/webp" />
                </label>
            </div>
            <div
              id="previews-container"
              class="hidden mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4"
            ></div>
          </div>

          <!-- Submit Button -->
          <div class="text-right pt-4">
            <button
              type="submit"
              id="submit-button"
              class="inline-flex items-center justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition disabled:bg-gray-400"
            >
              Guardar Cambios
            </button>
          </div>
        </form>
        <div id="status-message" class="mt-6 text-center font-medium"></div>
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ projectId: project.id }}>
  const form = document.getElementById("edit-project-form");
  const submitButton = document.getElementById("submit-button");
  const statusMessage = document.getElementById("status-message");
  const imagesToDeleteInput = document.getElementById("images-to-delete");
  const deleteImageBtns = document.querySelectorAll(".delete-image-btn");
  const imageUpload = document.getElementById("image-upload");
  const previewsContainer = document.getElementById("previews-container");

  // Logic for handling new image uploads and previews
  imageUpload.addEventListener("change", () => {
    previewsContainer.innerHTML = ""; // Clear old previews
    if (imageUpload.files.length > 0) {
      Array.from(imageUpload.files).forEach((file) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          // Create the wrapper div
          const wrapper = document.createElement("div");
          wrapper.className = "relative group h-32 border-2 border-dashed border-blue-300 rounded-md p-1";

          // Create the image preview
          const img = document.createElement("img");
          img.src = e.target.result;
          img.className = "w-full h-full object-cover rounded-sm";

          // Create the radio button overlay
          const radioOverlay = document.createElement("div");
          radioOverlay.className = "absolute bottom-0 left-0 right-0 h-8 bg-black/50 flex items-center justify-center rounded-b-sm opacity-80 group-hover:opacity-100 transition-opacity";

          // Create the radio button
          const radio = document.createElement("input");
          radio.type = "radio";
          radio.name = "thumbnail";
          radio.title = "Seleccionar como portada";
          // Use a special value format for new images
          radio.value = `new:${file.name}`;
          radio.className = "h-5 w-5 cursor-pointer accent-blue-500";

          radioOverlay.appendChild(radio);
          wrapper.appendChild(img);
          wrapper.appendChild(radioOverlay);
          previewsContainer.appendChild(wrapper);
        };
        reader.readAsDataURL(file);
      });
    }
  });
  // Logic for deleting existing images
  let imagesToDelete = [];
    deleteImageBtns.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const button = e.currentTarget;
        const imageId = button.dataset.imageId;
        const wrapper = document.querySelector(`[data-image-wrapper-id="${imageId}"]`);
        if (!wrapper) return;
        const radio = wrapper.querySelector('input[type="radio"]');

        // We'll just hide it, not toggle. It's simpler.
        if (!imagesToDelete.includes(imageId)) {
            imagesToDelete.push(imageId);
            wrapper.style.display = "none";
            if (radio) radio.disabled = true; // Disable to prevent submission
        }

        imagesToDeleteInput.value = JSON.stringify(imagesToDelete.map(Number));
      });
    });

  // Form submission logic
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const originalButtonText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = "Guardando...";
    statusMessage.textContent = "";

    const formData = new FormData(form);

    try {
      const response = await fetch(`/api/projects/${projectId}`, {
        method: "PUT",
        body: formData,
      });
      const result = await response.json();
      if (!response.ok) {
        throw new Error(result.message || "Algo salió mal.");
      }

      statusMessage.textContent = "¡Proyecto actualizado con éxito!";
      statusMessage.className = "mt-6 text-center font-medium text-green-600";
      setTimeout(() => {
        window.location.href = "/admin/proyectos";
      }, 1500);
    } catch (error) {
      statusMessage.textContent = error.message;
      statusMessage.className = "mt-6 text-center font-medium text-red-600";
      submitButton.disabled = false;
      submitButton.textContent = originalButtonText;
    }
  });
</script>
